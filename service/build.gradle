plugins {
    id "de.undercouch.download" version "3.2.0"
}

apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'jacoco'

ext.wildflyVersion = "10.1.0.Final"
ext.wildflyName = "wildfly-${project.wildflyVersion}.zip"

sourceSets {
    integTest {
        java {
            compileClasspath += main.output + main.compileClasspath
            runtimeClasspath += main.output + main.compileClasspath
            srcDir file('src/integTest/kotlin')
        }
        resources.srcDir file('src/integTest/resources')
    }
}

repositories {
    maven { url 'https://repository.jboss.org/nexus/content/groups/public-jboss' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases' }
}

dependencies {
    compile project(":api")

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.liquibase:liquibase-core:3.5.3"
    compileOnly "javax:javaee-api:$javaeeApiVersion"

    integTestCompile "junit:junit:4.12"
    integTestCompile "org.apache.httpcomponents:httpclient:4.5.3"
    integTestCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.1.0'
    integTestCompile 'org.jboss.arquillian:arquillian-bom:1.1.2.Final-wildfly-1'
    integTestCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.1.2.Final-wildfly-1'
    integTestCompile "com.jayway.jsonpath:json-path:2.2.0"
    integTestCompile 'org.jboss.arquillian.extension:arquillian-jacoco:1.0.0.Alpha9'
    integTestCompile "org.jacoco:org.jacoco.agent:0.7.9"


    integTestRuntime 'org.jboss.logging:jboss-logging:3.1.4.GA'
    integTestRuntime 'org.wildfly:wildfly-arquillian-container-managed:8.2.1.Final'
    integTestRuntime "org.jacoco:org.jacoco.core:0.7.9"
}

import de.undercouch.gradle.tasks.download.Download
task downloadWildfly(type: Download) {
    src "http://download.jboss.org/wildfly/$wildflyVersion/$wildflyName"
    dest "$rootDir/downloads/$wildflyName"
    overwrite false
}

task installTestWildfly(type: Copy, dependsOn: downloadWildfly) {
    from zipTree(downloadWildfly.dest)
    into buildDir
}

task copyJacocoLib(type: Copy) {
    into "$buildDir/jacoco/agent"
    from {
        configurations.integTestCompile.filter { it.name.contains("org.jacoco.agent") } .each { from(zipTree(it)) }
        null
    }
}

task integTest(type: Test, dependsOn: [installTestWildfly, copyJacocoLib]) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath + configurations.jacocoAgent
    environment 'JBOSS_HOME', "$buildDir/wildfly-$wildflyVersion"
    systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

jacoco {
    toolVersion "0.7.9"
}

task jacocoIntegTestReport(type: JacocoReport, dependsOn: integTest) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree('./build/classes')
    sourceDirectories = files('./src/main/kotlin')
    executionData = files("$buildDir/jacoco/integTest.exec")
}

check.dependsOn jacocoIntegTestReport
integTest.mustRunAfter test
